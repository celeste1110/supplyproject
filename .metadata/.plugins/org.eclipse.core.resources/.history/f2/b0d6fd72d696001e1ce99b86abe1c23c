package com.supply.products.services.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.supply.products.exceptions.ResourceNotFoundException;
import com.supply.products.models.dto.FilterProductDto;
import com.supply.products.models.dto.ProductRequestDto;
import com.supply.products.models.dto.ProductoResponseDto;
import com.supply.products.models.dto.mapper.ProductoMapper;
import com.supply.products.models.entity.Product;
import com.supply.products.repository.ProductoRepository;
import com.supply.products.services.ProductoService;

@Service
public class ProductoServiceImpl implements ProductoService{
	
	@Autowired
	private ProductoRepository productoRepository;

	@Override
	@Transactional(readOnly = true)
	public Page<ProductoResponseDto> findProductoByAll(Pageable pageable) {
		
		Page<Product> products=productoRepository.findAll( pageable);
		
		return (Page<ProductoResponseDto>) products.filter(p->p.getHabilitado().equals(true))
				.map(ProductoMapper::mapToProductoDto);
	}
	
	@Override
	@Transactional(readOnly = true)
	public ProductoResponseDto findProductoById(Long id) {
	
		Product oproducto=productoRepository.findById(id)
				.filter(p->p.getHabilitado().equals(true))
				.orElseThrow(()->new ResourceNotFoundException("Product not found with id: " + id));
		
		
			return ProductoMapper.mapToProductoDto(oproducto);
	}



	@Override
	@Transactional(readOnly = true)
	public List<ProductoResponseDto> findProductoByName(FilterProductDto request) {
		
		List<Product> productos=productoRepository.findAll();
		
		return productos.stream().filter(p->p.getHabilitado().equals(true) &&
				p.getNombre().contains(request.getNombre()))
				.map(ProductoMapper::mapToProductoDto).toList();
	}

	@Override
	 @Transactional
	public ProductoResponseDto saveProducto(ProductRequestDto producto) {
		
		return null;
	}

	@Override
	public ProductoResponseDto updateProducto(ProductRequestDto producto) {
		
		return null;
	}

	@Override
	public void deleteProducto(Long id) {
		
		
	}





}

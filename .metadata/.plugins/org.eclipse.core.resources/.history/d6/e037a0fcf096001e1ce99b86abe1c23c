package com.supply.products.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.supply.products.models.dto.FilterProductDto;
import com.supply.products.models.dto.ProductRequestDto;
import com.supply.products.models.dto.ProductResponseDto;
import com.supply.products.services.ProductService;

@RestController
@RequestMapping("/product")
public class ProductController {
	
	@Autowired
	private ProductService productService;
	
	@GetMapping
	public ResponseEntity<Page<ProductResponseDto>> listAll(Pageable pageable) {
		
		Page<ProductResponseDto> listProduct=productService.findProductByAll(pageable);
		return new ResponseEntity<>(listProduct,HttpStatus.OK);
	}

	@GetMapping("/{id}")
	public ResponseEntity<ProductResponseDto> getProduct(@PathVariable Long id) {
		ProductResponseDto product = productService.findProductById(id);
		
		return new ResponseEntity<>(product,HttpStatus.OK);
	}
	
	@PostMapping("/filter")
	public ResponseEntity<List<ProductResponseDto>> filter(@RequestBody FilterProductDto request) {
		
		List<ProductResponseDto> listProducts=productService.findProductByName(request);
		return new ResponseEntity<>(listProducts,HttpStatus.OK);
			
	}
	
	@PostMapping
	public ResponseEntity<ProductResponseDto> createProduct(@RequestBody ProductRequestDto product) {
		
		return ResponseEntity.status(HttpStatus.CREATED).body(service.saveProducto(producto));
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> editar(@Valid @RequestBody Producto producto, BindingResult result,
			@PathVariable Long id) {
		
		Optional<Producto> o = this.service.findProductoById(id);

		if (!o.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		
		boolean repetido=this.esRepetido(producto,id);
		boolean tieneError=result.hasErrors();

		if (result.hasErrors() || repetido) {
			return this.validar(result,repetido,tieneError);
		}
		

		Producto dbProducto = o.get();
		dbProducto.setNombre(producto.getNombre());
		dbProducto.setCodCategoria(producto.getCodCategoria());
		dbProducto.setCodUnidMedida(producto.getCodUnidMedida());
		dbProducto.setPrecio(producto.getPrecio());
		dbProducto.setBorrador(producto.getBorrador());
		dbProducto.setModificadoPor("SHP-WEB");
		dbProducto.setFechaModificacion(new Date());

		return ResponseEntity.status(HttpStatus.CREATED).body(this.service.saveProducto(dbProducto));

	}

	@DeleteMapping("/{id}")
	public ResponseEntity<?> eliminar(@PathVariable Long id) {
		Optional<Producto> o = service.findProductoById(id);

		if (!o.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		//service.deleteEmbarcacionById(id);
		//return ResponseEntity.noContent().build();
		
		Producto dbProducto = o.get();
		dbProducto.setHabilitado(false);
		return ResponseEntity.status(HttpStatus.CREATED).body(this.service.saveProducto(dbProducto));
		
	}
	
	
	
	
	
	

}
